#include "print.h"
#include "functions.h" //includes powers_of_two[] and powers_of_ten[]
#include <vector>
#include <fstream>
#include <chrono>

//A generic Kakuro solver. Modified from q424.h so that it applies to standard Kakuro problems
//and not the modified Project Euler version.

//Classes, Structs and Enums for Problem
enum Directions { Horizontal, Vertical };
enum Tiles { Board, Clue, Answer };

int maximumTileNumbers[10] = { 0, 9, 17, 24, 30, 35, 39, 42, 44, 45 };
int minimumTileNumbers[10] = { 0, 1, 3, 6, 10, 15, 21, 28, 36, 45 };
int yeet = 69;

class KakuroBoard;

struct Possibilities
{
	int digits = 0b1111111111;
	bool changed = true; //used for skipping steps when nothing has changed.
	//initialize to true so that functions run from the get-go

	void remove(int num)
	{
		//Allows for the removal of multiple bits at a time. The input number is a binary
		//representation of the bits to remove from 'digits'.
		//If something has already been removed we don't want to add it back, for
		//this reason we do a binary AND before doing a binary XOR
		digits ^= (digits & num);

		//this function only gets called if there are digits to be removed,
		//therefore any time this function get's called the changed boolean
		//should be set to true
		changed = true;
	}
	int getLowest()
	{
		//returns the decimal value of lowest bit in 'digits'
		return log(digits & -digits) / log(2);
	}
	int getHighest()
	{
		//returns the decimal value of highest bit in 'digits'
		return log(digits) / log(2);
	}
	bool solved()
	{
		//this function returns true if there's only 1 binary digit left in 'digits',
		//otherwise it returns false
		if (!(digits & (digits - 1))) return true;
		else return false;
	}
	void print()
	{
		//prints all of the digits that are still in the 'digits' binary number
		for (int i = 0; i < 10; i++)
			if (this->digits & powers_of_two[i]) std::cout << i << " ";
	}
};
class BoardTile
{
protected:
	std::pair<int, int> location = { 0, 0 };
	int type = 0;

public:
	void setLocation(std::pair<int, int> loc)
	{
		this->location = loc;
	}
	std::pair<int, int> getLocation()
	{
		return this->location;
	}
	void setType(int t)
	{
		this->type = t;
	}
	int getType()
	{
		return this->type;
	}
};

class ClueTile : public BoardTile
{
private:
	int answerLengths[2] = { 0, 0 };
	int solvedClueValues[2] = { 0, 0 }; //0 = Horizontal, 1 = Vertical

public:
	void incrementAnswerLength(int orientation) { this->answerLengths[orientation]++; }
	int getClueAnswerLength(int orientation) { return this->answerLengths[orientation]; }
	int getSolvedClueValue(int orientation) { return this->solvedClueValues[orientation]; }
	void setSolvedClueValue(int orientation, int value) { this->solvedClueValues[orientation] = value; }
};
class AnswerTile : public BoardTile
{
private:
	Possibilities answerPossibilities;
	ClueTile* governingClues[2];
	KakuroBoard* governingBoard;
	int solvedAnswer = 0;
	bool updated = false;

	void answerTrimViaSolvedAnswer(bool print = false);

public:
	bool Updated() { return this->updated; }
	void remove(int num);
	void setSolvedAnswer(int ans) { this->solvedAnswer = ans; }
	int getSolvedAnswer() { return this->solvedAnswer; }
	void setClueTile(int orientation, ClueTile* clue) { this->governingClues[orientation] = clue; }
	void setBoard(KakuroBoard* board) { this->governingBoard = board; }
	ClueTile* getGoverningClue(int orientation) { return this->governingClues[orientation]; }
	Possibilities* getPossibilities() { return &this->answerPossibilities; }
};
class KakuroBoard
{
private:
	int dimension = 0, totalClues = 0, totalAnswers = 0, solvedAnswers = 0;
	BoardTile*** board;
	ClueTile** clueTiles;
	AnswerTile** answerTiles;

public:
	bool updated = false;
	void incrementSolvedAnswers() { this->solvedAnswers++; }
	BoardTile* getTile(int row, int col)
	{
		//returns a pointer to the board tile at the specified location
		return *(*(this->board + row) + col);
	}
	void setBoard(BoardTile*** b) { this->board = b; }
	std::pair<int, ClueTile**> getClues()
	{
		//returns a list containing all of the clue tiles as well as
		//the number of clues in the list
		return { this->totalClues, this->clueTiles };
	}
	std::pair<int, AnswerTile**> getAnswers()
	{
		//returns a list containing all of the answer tiles as well as
		//the number of answers in the list
		return { this->totalAnswers, this->answerTiles };
	}
	void setDimension(int d)
	{
		this->dimension = d;
	}
	void setTotalClueTile(int tiles) { this->totalClues = tiles; }
	void setTotalAnswerTile(int tiles) { this->totalAnswers = tiles; }
	BoardTile*** getBoard() { return this->board; }
	void setClueTile(ClueTile** clueArray) { this->clueTiles = clueArray; }
	void setAnswerTile(AnswerTile** answerArray) { this->answerTiles = answerArray; }
	int getClueAmount() { return this->totalClues; }
	int getAnswerAmount() { return this->totalAnswers; }
	int getDimension() { return this->dimension; }
	bool solved()
	{
		if (totalAnswers == solvedAnswers) return true;
		return false;
	}

	void printBoard()
	{
		//prints out the kakuro board so it's easier to visualize
		//the maximum length of an individual tile is 7 (a clue tile with two digit
		//horzontal and vertical clues) so every tile will be normalized to this distance
		BoardTile* currentTile;
		ClueTile* currentClue;
		AnswerTile* currentAnswer;

		std::cout << " ";
		for (int i = 0; i < this->dimension; i++) std::cout << "---- ";
		std::cout << std::endl;

		for (int i = 0; i < dimension; i++)
		{
			for (int k = 0; k < 2; k++)
			{
				std::cout << "|";
				for (int j = 0; j < dimension; j++)
				{
					currentTile = this->getTile(i, j);
					if (currentTile->getType() == Board) std::cout << "xxxx|";
					else if (currentTile->getType() == Answer)
					{
						if (k == 0)
						{
							currentAnswer = (AnswerTile*)currentTile;
							std::string printVal = " ";
							if (currentAnswer->getSolvedAnswer() != 0) printVal = std::to_string(currentAnswer->getSolvedAnswer());
							std::cout << "  " << printVal << " |";
						}
						else std::cout << "    |";
					}
					else
					{
						currentClue = (ClueTile*)currentTile;
						std::string printVal = "";
						int clueVal = currentClue->getSolvedClueValue(k);
						if (currentClue->getSolvedClueValue(k) > 0) printVal = std::to_string(currentClue->getSolvedClueValue(k));

						if (printVal.size() == 0) printVal = "  ";
						else if (printVal.size() == 1) printVal = " " + printVal;

						if (k == 0) std::cout << "x\\" << printVal << '|';
						else std::cout << printVal << "\\x|";
					}
				}
				std::cout << std::endl;
			}
			std::cout << " ";
			for (int i = 0; i < this->dimension; i++) std::cout << "---- ";
			std::cout << std::endl;
		}
	}
	void printAllAnswerPossibilities()
	{
		std::cout << "All answer tile possibilities for Kakuro Board:\n";
		for (int i = 0; i < this->totalAnswers; i++)
		{
			AnswerTile* currentAnswer = *(this->answerTiles + i);
			std::cout << "Possibilities for tile at (" << currentAnswer->getLocation().first << ", " << currentAnswer->getLocation().second <<
				") are: ";

			for (int j = 0; j < 10; j++)
				if (powers_of_two[j] & currentAnswer->getPossibilities()->digits) std::cout << j << " ";

			std::cout << std::endl;
		}
		std::cout << std::endl;
	}
};

//Function to create all ways of creating numbers in Kakuro (limited to maximum of 6 digits)
void kakuroNumberCombinations(std::vector<std::vector<int> >& combos)
{
	//Nothing fancy about this algorithm, it just keeps adding numbers wherever possible. The structure for the final
	//vector is as follows. The first vector represents how many digits we have and the second vector represents the number
	//we're trying to make. Each integer in the second vector is a binary representation of all the digits that can be
	//used to make the current number at the current digits.

	//For example, combos[3][8] is a binary number representing all of the digits that can be used to make the number
	//8 while using 3 distinct digits. We can make 8 with 3 digits with [5, 2, 1] or [4, 3, 1]. Since the digits 1 - 5
	//or all used here then combos[3][8] would be 0b0000111110 = 62. To get this final vector we'll need to keep vectors
	//of all the actual combinations as we're building them (i.e. [5, 2, 1] and [4, 3, 1] would need to be saved), however,
	//these can be discarded at the end of this function

	std::vector<std::vector<std::vector<std::vector<int> > > > constructionCombos;

	for (int i = 0; i < 10; i++)
	{
		std::vector<std::vector<std::vector<int> > > constructionNumberOfDigits;
		std::vector<int> numberOfDigits;
		constructionCombos.push_back(constructionNumberOfDigits);
		combos.push_back(numberOfDigits);
	}

	int rowMaximum = 0, currentNum = 9;
	for (int i = 1; i < 10; i++)
	{
		//we start at 1 because we can't make any 0 digit numbers. Technically we can't use any 1 digit numbers on a kakuro board either, however, we build off of them
		//to get our actual combinations.
		rowMaximum += currentNum--;
		for (int j = 0; j <= rowMaximum; j++)
		{
			std::vector<std::vector<int> > actualNumber;
			constructionCombos[i].push_back(actualNumber);
			combos[i].push_back(0);
		}
	}

	//set all of the necessary 1 digit building blocks
	for (int i = 1; i <= 9; i++)
	{
		constructionCombos[1][i].push_back({ i });
		combos[1][i] = powers_of_two[i];
	}

	//now iterate over every combo from the 1 digit row to the 9 digit row, adding single digits that are greater than current last digit
	for (int i = 1; i <= 9; i++)
	{
		for (int j = 0; j < constructionCombos[i].size(); j++)
		{
			if (constructionCombos[i][j].size() == 0) continue; //no need to check any combos that aren't possible
			for (int k = 0; k < constructionCombos[i][j].size(); k++)
			{
				int kBinary = 0;
				for (int l = 0; l < constructionCombos[i][j][k].size(); l++) kBinary |= powers_of_two[constructionCombos[i][j][k][l]];
				for (int l = constructionCombos[i][j][k].back() + 1; l <= 9; l++)
				{
					//create a copy of the existing vector each time we add a new digit to it
					std::vector<int> copy = constructionCombos[i][j][k];
					copy.push_back(l);
					constructionCombos[i + 1][j + l].push_back(copy);
					combos[i + 1][j + l] |= (kBinary | powers_of_two[l]);
				}
			}
		}
	}

	//Uncomment the below section to see all of the ways to construct different numbers in Kakuro
	/*for (int i = 1; i < 10; i++)
	{
		for (int j = 0; j <= maximumTileNumbers[i]; j++)
		{
			if (constructionCombos[i][j].size() == 0) continue;
			std::cout << "Ways to make " << j << " with " << i << " digits." << std::endl;
			for (int k = 0; k < constructionCombos[i][j].size(); k++)
			{
				vprint(constructionCombos[i][j][k]);
			}
			std::cout << std::endl;
		}
	}*/
}

//Functions for Kakuro Board Creation
void createBoard(std::string boardString, KakuroBoard& board)
{
	int currentIndex = 0, dimension = 0;
	while (boardString[currentIndex] != ',')
	{
		dimension *= 10;
		dimension += (boardString[currentIndex++] - '0');
	}
	currentIndex++; //move off of the coma

	BoardTile*** newBoard = new BoardTile * *[dimension]; //create board with 'dimension' number of rows
	int clueTiles = 0, answerTiles = 0;

	for (int i = 0; i < dimension; i++)
	{
		BoardTile** tiles = new BoardTile * [dimension]; //each row of the board must have 'dimension' number of columns
		*(newBoard + i) = tiles;

		bool stop = false;
		for (int j = 0; j < dimension; j++)
		{
			//any given tile can be a plain tile (represented by an X), answer tile (represented by a 0) are a clue tile (represented by a '(' ).
			//If it's one of the first two options tile creation is easy as we only need a single character. The clue tiles though we will need to scan character
			//by character until hitting the closing ')'.
			BoardTile* newTile;

			//check to see if this is the very last tile
			if ((i == (dimension - 1)) && (j == (dimension - 1))) stop = true;

			if (boardString[currentIndex] == 'X')
			{
				//create a new blank tile and move on
				newTile = new BoardTile();
				newTile->setType(Board);

			}
			else if (boardString[currentIndex] == '(')
			{
				//we need to scan until hitting a closing ')' to figure out which clues are present
				clueTiles++;
				ClueTile* ct = new ClueTile();
				int clueType = 0;
				while (boardString[++currentIndex] != ')')
				{
					int clueValue = 0;
					if (boardString[currentIndex] == 'v') clueType = 1;
					else if (boardString[currentIndex] == ',') continue;

					if (boardString[currentIndex + 2] == ',' || boardString[currentIndex + 2] == ')') //this is a one digit clue
					{
						//ct->setClueLetter(clueType, 1, board.getLetterPossibilities(), boardString[++currentIndex]); //this is only a one digit clue
						ct->setSolvedClueValue(clueType, boardString[++currentIndex] - '0');
					}
					else
					{
						//this is a two digit clue, add both characters
						//ct->setClueLetter(clueType, 0, board.getLetterPossibilities(), boardString[++currentIndex]);
						//ct->setClueLetter(clueType, 1, board.getLetterPossibilities(), boardString[++currentIndex]);
						clueValue = 10 * (boardString[++currentIndex] - '0');
						clueValue += boardString[++currentIndex] - '0';
						ct->setSolvedClueValue(clueType, clueValue);
					}
				}
				
				//after parsing the clue, set the newTile pointer
				newTile = (BoardTile*)ct;
				newTile->setType(Clue);
			}
			else
			{
				//create a new answer tile
				answerTiles++;
				AnswerTile* at = new AnswerTile();
				//if (boardString[currentIndex] == 'O') at->setInternalClue(' ');
				//else at->setInternalClue(boardString[currentIndex]);
				newTile = (BoardTile*)at;
				newTile->setType(Answer);
			}

			currentIndex += 2;
			newTile->setLocation({ i, j }); //add the location to tile
			*(tiles + j) = newTile; //add the new tile to the board

			if (stop) break; //break out of loop once we hit the last tile
		}
	}
	board.setDimension(dimension);
	board.setBoard(newBoard);
	board.setTotalClueTile(clueTiles);
	board.setTotalAnswerTile(answerTiles);

	//Now that the board string has been read, we need to create the ClueTile and AnswerTile arrays for the board, as well as
	//set the amount of answer tiles for each clue, and which clues govern which answer tiles
	ClueTile** clueArray = new ClueTile * [board.getClueAmount()];
	AnswerTile** answerArray = new AnswerTile * [board.getAnswerAmount()];
	int clueNumber = 0, answerNumber = 0;

	for (int i = 0; i < dimension; i++)
	{
		for (int j = 0; j < dimension; j++)
		{
			BoardTile* currentTile = board.getTile(i, j);
			if (currentTile->getType() == Clue)
			{
				//add the clue to the clue array
				ClueTile* currentClue = (ClueTile*)currentTile;
				*(clueArray + (clueNumber++)) = currentClue;

				//iterate until the end of the answer tiles are reached in both the horizontal and vertical directions
				for (int orientation = Horizontal; orientation <= Vertical; orientation++)
				{
					if (currentClue->getSolvedClueValue(orientation) != 0) //make sure there's a clue in this orientation
					{
						//we set k in the below loop by using the fact that orientation = 0 for Horizontal and 1 for Vertical.
						//By converting to a boolean this means that when looking at horizontal clues, k starts at a value of j + 1
						//while for vertical clues k will start at a value of i + i. We use the same logic to increment to the next tile.
						int kStart = !(bool)orientation * j + (bool)orientation * i;
						for (int k = kStart + 1; k < dimension; k++)
						{
							//again, a somewhat complex way for selecting the tile, but basically if we're looking at a horizontal clue then only j will increase
							//and if we're looking at a vertical clue then only i will increase.
							AnswerTile* currentAnswer = (AnswerTile*)board.getTile((bool)orientation * (k - kStart) + i, !(bool)orientation * (k - kStart) + j);
							if (currentAnswer->getType() != Answer) break;

							//if we find an answer tile we set it's appropriate clueTile reference and increment the length of the clueAnswer by 1
							currentAnswer->setClueTile(orientation, currentClue);
							currentClue->incrementAnswerLength(orientation);
						}
					}
				}
			}
			else if (currentTile->getType() == Answer)
			{
				//the brunt of work in this part of board creation is handled when we find clues, all we need to do when finding an
				//answer tile is to add it to the answer array, and set the pointer to the kakuro board
				AnswerTile* currentAnswer = (AnswerTile*)currentTile;
				*(answerArray + (answerNumber++)) = currentAnswer;
				currentAnswer->setBoard(&board);
			}
		}
	}

	//finally set the clue and answer arrays in the Kakuro Board object. We're now done setting up the board
	board.setClueTile(clueArray);
	board.setAnswerTile(answerArray);
}

//Forward Decleration Functions
void AnswerTile::remove(int num)
{
	//takes a binary number as input and removes it's bits as
	//possibilities. If no bits actually match then nothing happens
	if (!(num & this->answerPossibilities.digits))
	{
		this->updated = false; //no change so the updated variable is set to false
		return;
	}

	//at least one digit is getting removed as an option so the updated variable is set to true
	this->updated = true;

	//if there are digits to remove, remove them and mark the answer
	//tile possibilities as having been changed
	this->answerPossibilities.remove(num);

	//check to see if we've solved the answer tile. If so set the answer and increment solved variable for board
	if (this->answerPossibilities.solved())
	{
		this->solvedAnswer = this->answerPossibilities.getHighest();
		this->governingBoard->incrementSolvedAnswers();
		this->answerTrimViaSolvedAnswer(); //after solving an answer tile, this will trim other tiles
	}
}
void AnswerTile::answerTrimViaSolvedAnswer(bool print)
{
	if (print)
	{
		this->governingBoard->printBoard();
		std::cout << "Solved answer at location (" << this->getLocation().first << ", " << this->getLocation().second << ")" << std::endl;
		this->governingBoard->printAllAnswerPossibilities();

	}
	//When an answer tile is solved, this function removes the solved number as a possibility from all other answer tiles
	//in the same row and column of the kakuro board
	int clueLocation = this->governingClues[Horizontal]->getLocation().second, removeDigit = this->answerPossibilities.digits;
	AnswerTile* removeAnswer;

	//loop through every answer tile tied to the current tile's horizontal clue and remove the appropriate digit
	for (int j = clueLocation + 1; j <= this->governingClues[Horizontal]->getClueAnswerLength(Horizontal) + clueLocation; j++)
	{
		if (j == this->getLocation().second) continue; //don't remove the possibility from actual answer tile
		removeAnswer = (AnswerTile*)this->governingBoard->getTile(this->governingClues[Horizontal]->getLocation().first, j);
		removeAnswer->remove(removeDigit);
	}

	clueLocation = this->governingClues[Vertical]->getLocation().first; //update the starting position
	//loop through every answer tile tied to the current tile's vertical clue and remove the appropriate digit
	for (int j = clueLocation + 1; j <= this->governingClues[Vertical]->getClueAnswerLength(Vertical) + clueLocation; j++)
	{
		if (j == this->getLocation().first) continue; //don't remove the possibility from actual answer tile
		removeAnswer = (AnswerTile*)this->governingBoard->getTile(j, this->governingClues[Vertical]->getLocation().second);
		removeAnswer->remove(removeDigit);
	}

	if (print) this->governingBoard->printAllAnswerPossibilities();
}

//Functions for Kakuro Board Manipulation
void answerTrimViaClue(KakuroBoard* board, std::vector<std::vector<int> >& combos)
{
	//In this function we visit every AnswerTile on the board and try to reduce the total number of digits that can go inside of them.
	//This is done by looking at the
	//horizontal and vertical clues that govern the box. For example, if one of the clues is 12, and there are
	//two answer boxes making up that clue's answer then our options to fill in the two boxes would be (9, 3), (8, 4) and (7, 5).
	//At a glance we can see that the numbers 1, 2, 3 and 6 couldn't be utilized here.
	std::pair<int, AnswerTile**> answers = board->getAnswers();

	for (int i = 0; i < answers.first; i++)
	{
		AnswerTile* currentAnswer = *(answers.second + i);
		if (currentAnswer->getSolvedAnswer() > 0) continue; //no need to do anything with a tile we've already solved

		//Look at all options in the clue possibilities list and for both horizontal and vertical clues and compare with the combos vector
		//for the given clue length
		for (int orientation = Horizontal; orientation <= Vertical; orientation++)
		{
			if (currentAnswer->getGoverningClue(orientation)->getSolvedClueValue(orientation) > 0)
			{
				//a binary number representing all digits that can be used
				int allowableDigits = combos[currentAnswer->getGoverningClue(orientation)->getClueAnswerLength(orientation)][currentAnswer->getGoverningClue(orientation)->getSolvedClueValue(orientation)];

				//Remove anything not included in 'allowedDigits'
				currentAnswer->remove(~allowableDigits & 0b1111111111);
			}
		}
	}
}
void answerTrimViaAnswer(KakuroBoard* board, std::pair<int, int> location, int* answerTilePossibilities, int* selectedNumbers, std::vector<std::vector<int> >* combos, int clueSize = 0, int currentNumber = 0, int currentSum = 0,
	int goal = 0, bool horizontal = false, bool recursion = false, int level = 0)
{
	if (!recursion)
	{
		//this part of the function is just to get everything set up for the recursive part below
		std::pair<int, ClueTile**> clues = board->getClues();
		for (int i = 0; i < clues.first; i++)
		{
			ClueTile* currentClue = *(clues.second + i);
			for (int orientation = Horizontal; orientation <= Vertical; orientation++)
			{
				if (currentClue->getClueAnswerLength(orientation) == 0) continue;

				//loop through all of the answer tiles for the current clue, if all tiles have already been
				//answered, or if they haven't changed since last iteration (and clue is also the same)
				//then there's no reason to check again.
				int clueLength = currentClue->getClueAnswerLength(orientation), numberSolved = 0, numberChanged = 0;
				AnswerTile** answerTiles = new AnswerTile * [clueLength]();
				int* tileOptions = new int[clueLength](), * usedDigits = new int[clueLength]();
				bool oneDigit = false;
				for (int j = 0; j < clueLength; j++)
				{
					answerTiles[j] = (AnswerTile*)board->getTile(currentClue->getLocation().first + (orientation * (j + 1)), currentClue->getLocation().second + (!orientation * (j + 1)));
					if (answerTiles[j]->getSolvedAnswer() != 0) numberSolved++;
					numberChanged += answerTiles[j]->getPossibilities()->changed;
				}

				//TODO:
				//Before actually going through with the brute force operation, a check is called to make sure
				//that there aren't too many possibilities. For example, if the clue has 5 answer tiles and each
				//one of those currently allows the number 1-9 in them then there are theoretically ~3,000 options to
				//recursively check. Most likely with this many possibilities there won't be much actually altered
				//and this fairly time expensive check will be mostly useless.

				answerTrimViaAnswer(board, { currentClue->getLocation().first + orientation, currentClue->getLocation().second + !orientation },
					tileOptions, usedDigits, combos, clueLength, 0, 0, currentClue->getSolvedClueValue(orientation), !orientation, true);

				//update the answer tile possibilities to reflect what's stored in the tileOptions array
				for (int j = 0; j < currentClue->getClueAnswerLength(orientation); j++)
				{
					AnswerTile* currentAnswer = (AnswerTile*)board->getTile(currentClue->getLocation().first + (orientation * (j + 1)), currentClue->getLocation().second + (!orientation * (j + 1)));
					bool solvedYet = currentAnswer->getPossibilities()->solved(); //check to see if the current answer tile has been solved yet

					if (!solvedYet)
					{
						currentAnswer->remove(~tileOptions[j] & 0b1111111111); //remove anything that isn't a possibility
						if (currentAnswer->Updated()) board->updated = true; //if at least one change occurs then the board updated variable is set to true
					}
				}

				//use a label to potentially exit from above nested loops
			nextClue:
				delete[] usedDigits;
				delete[] tileOptions;
				delete[] answerTiles;
			}
		}
		//After running the function, go through and set the changed variable to false for every letter.
		//The other functions in the game loop will reset these variables to true if they get changed again.
		//for (int i = 0; i < 10; i++)
		//	board->getLetterPossibilities()->seePossibility(i + 'A')->changed = false;

		AnswerTile** answerTiles = board->getAnswers().second;
		for (int i = 0; i < board->getAnswers().first; i++)
		{
			AnswerTile* currentAnswer = *(answerTiles + i);
			currentAnswer->getPossibilities()->changed = false;
		}
	}
	else
	{
		//the recursive part of the function
		AnswerTile* currentAnswer = (AnswerTile*)board->getTile(location.first, location.second);
		//if (level == (clueSize - 1))
		if (clueSize == 1)
		{
			//std::cout << "current level is: " << level << std::endl;
			//Base of recursion. We're currently looking at the final answer tile for the clue, instead of iterating through
			//all of it's options, just see if the number we need exists as a possibility
			int numberNeeded = goal - currentSum;

			if (numberNeeded > 0 && numberNeeded <= 9) //if the number isn't possible don't even check
			{
				//if the needed number is a possibility in the answer tile and hasn't been used yet we're good
				if ((powers_of_two[numberNeeded] & currentAnswer->getPossibilities()->digits) && (!(powers_of_two[numberNeeded] & currentNumber)))
				{
					selectedNumbers[level] = powers_of_two[numberNeeded];
					//selectedNumbers[clueSize - 1] = powers_of_two[numberNeeded];
					for (int i = 0; i < (level + 1); i++) answerTilePossibilities[i] |= selectedNumbers[i];
					selectedNumbers[level] = 0;
					//selectedNumbers[clueSize - 1] = 0;
				}
			}

			return;
		}

		//Before going on, we do a check to make sure we can still possibly reach our goal number. For example,
		//let's say the goal is 24 and there are 4 answer tiles. For the first tile a 1 was selected and for the
		//second tile a 2 was selected. We now have only two more tiles to reach (24 - 1 - 2) 21 which isn't possible
		//so therefore we go up to the previous level of the recursion. Oppositely if there are too many tiles and it's
		//not possible to stay under the goal any longer (for example, we only need a value of 1 to hit the goal but
		//there are two answer tiles left) we also return to the previous recursion level.
		int to_goal = goal - currentSum;
		if ((to_goal > maximumTileNumbers[clueSize]) || (to_goal < minimumTileNumbers[clueSize]))
		{
			//std::cout << "clue size: " << clueSize << ", current goal: " << goal - currentSum << std::endl;
			return;
		}

		//if the current answer tile has already been solved then we must select that number, no need to loop
		if (currentAnswer->getSolvedAnswer() != 0)
		{
			int solvedNumber = currentAnswer->getSolvedAnswer();
			if (!(powers_of_two[solvedNumber] & currentNumber)) //make sure we haven't already selected the number in a previous box
			{
				if (!(currentSum + solvedNumber >= goal)) //make sure adding this number won't exceed the goal
				{
					selectedNumbers[level] = powers_of_two[solvedNumber]; //add number to selected vector
					answerTrimViaAnswer(board, { location.first + !horizontal, location.second + horizontal },
						answerTilePossibilities, selectedNumbers, combos, clueSize - 1, currentNumber | powers_of_two[solvedNumber], currentSum + solvedNumber, goal, horizontal, true, level + 1);
					selectedNumbers[level] = 0; //remove number from selected vector
				}
			}
		}
		else
		{
			//otherwise, loop through all possiblities that can go in the current number tile. Look at all digits currently allowed
			//in the tile for the current goal number by using the combination vector defined at beginning of program
			Possibilities possibilitiesViaCombo; possibilitiesViaCombo.digits = combos->at(clueSize)[to_goal];

			for (int i = possibilitiesViaCombo.getLowest(); i <= possibilitiesViaCombo.getHighest(); i++)
			{
				//std::cout << i << ", clue size: " << clueSize << ", current goal: " << goal - currentSum << std::endl;
				//select any possible number that won't make us go over the goal
				if (powers_of_two[i] & currentAnswer->getPossibilities()->digits) //make sure that the number can go in the box
				{
					if (!(powers_of_two[i] & currentNumber)) //make sure we haven't already selected the number in a previous box
					{
						if (!(currentSum + i >= goal)) //make sure adding this number won't exceed the goal
						{
							selectedNumbers[level] = powers_of_two[i]; //add number to selected vector
							answerTrimViaAnswer(board, { location.first + !horizontal, location.second + horizontal },
								answerTilePossibilities, selectedNumbers, combos, clueSize - 1, currentNumber | powers_of_two[i], currentSum + i, goal, horizontal, true, level + 1);
							selectedNumbers[level] = 0; //remove number from selected vector
						}
					}
				}
			}
		}
	}
}

int main()
{
	auto run_time = std::chrono::steady_clock::now();
	long long answer = 0;
	bool dummy = false; //a dummy variable needed to initialize some recursive functions

	//Before looping through all the puzzles, create a vector that stores all the different ways to solve (up to 6 digit) Kakuro clues.
	//This will make it much quicker to see at a glance what possibilities can be removed from answer tiles
	std::vector<std::vector<int> > combinations;
	kakuroNumberCombinations(combinations);

	std::ifstream myFile;
	std::string boardString;
	myFile.open("puzzle.txt");

	//Read the next board from text file
	std::getline(myFile, boardString);

	//Create the Kakuro Board
	KakuroBoard kakuroBoard;

	//Fill in the Kakuro board using a function to parse the board string
	createBoard(boardString, kakuroBoard);
	//kakuroBoard.printBoard();

	answerTrimViaClue(&kakuroBoard, combinations); //This function was moved outside of the solve loop because the clues no longer change

	//Now that setup is complete, we enter our solve loop and don't exit it
	//until the puzzle is solved
	int loopCount = 0;
	bool solved = true;
	while (!kakuroBoard.solved())
	//for (int j = 0; j < 12; j++)
	{
		//we set the updated variable to false at the beginning of each loop. The first
		//time a loop iterates without a single change occuring this will trigger some
		//other functions to occur
		kakuroBoard.updated = false;

		answerTrimViaAnswer(&kakuroBoard, { 0, 0 }, nullptr, nullptr, &combinations);
		loopCount++;

		if (kakuroBoard.updated == false)
		{
			solved = false;
			break;
		}
	}

	if (solved)
	{
		kakuroBoard.printBoard();
		std::cout << "The board was sovled in " << loopCount << " iterations." << std::endl;
	}
	else
	{
		std::cout << "Solving got stuck after " << loopCount << " iterations." << std::endl;
		kakuroBoard.printBoard();
		kakuroBoard.printAllAnswerPossibilities();
	}
	
	myFile.close(); //close down the file after reading all boards

	return 0;
}

/*
* NOTES
* I decided to try and repurpose the code I wrote to solve Project Euler 424 so that it could solve standard Kakuro problems. This entailed
* getting rid of any functions (and parts of functions/classes) that had anything to do with solving for clues or letters. This reduced the lines of
* code from ~1500 to ~800, so although it's still a pretty large program it's much lighter than before. Since Kakuro puzzles can have a maximum answer
* length of 9, vs. the max length of 5 in the Project Euler problem there are now a lot more options to solve given clues. Because of this, the brute
* force part of the algorithm I had originally written is no longer robust enough to solve for all answers. I need to either put in some functions that
* will fill in blanks (and keep trying to solve until an error is found), or try and emply some more advanced techniques like Swordfish or the number
* sum technique.
*/
